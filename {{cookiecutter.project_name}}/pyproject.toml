[tool.poetry]
name = "{{ cookiecutter.module_name }}"
version = "1.0.0"
description = "{{ cookiecutter.description }}"
authors = [ 
    "{{ cookiecutter.maintainer_name }} <{{ cookiecutter.maintainer_email }}>"
]
readme = "README.md"
license = "{{ cookiecutter.license }}"

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.dev.dependencies]
mkdocs = "^1.2.3"
mkdocs-material = "^8.2.5"
mkdocstrings = "^0.18.1"
mkdocs-click = "^0.5.0"
mkdocstrings-python = "^0.6.6"

[tool.poetry.group.test.dependencies]
pytest = "^6.2.4"
poethepoet = "^0.13.1"
isort = "^5.10.1"
black = "^22.10.0"
flake8 = "^5.0.4"
mypy = "^0.982"
types-PyYAML = "^6.0.12"
types-tabulate = "^0.9.0"
types-requests = "^2.28.11"
pytest-cov = "^2.12.1"
pytest-bdd = "^4.0.0"
pytest-spec = "^3.2.0"

[tool.poe.tasks]
style = [
    { cmd = "isort {{ cookiecutter.module_name }}"},
    { cmd = "black {{ cookiecutter.module_name }}"},
    { cmd = "isort test"},
    { cmd = "black test"}
]
quality = [
    { cmd = "mypy {{ cookiecutter.module_name }}" },
    { cmd = "black --check {{ cookiecutter.module_name }}" },
    { cmd = "flake8 {{ cookiecutter.module_name }}" },
    { cmd = "mypy test" },
    { cmd = "black --check test" },
    { cmd = "flake8 test" }
]
test = [
    { cmd = "pytest --spec test/unit --junitxml=junit/test-results.xml --cov=datavault --cov-report=xml" }
]

[tool.isort]
multi_line_output = 3
line_length = 180
include_trailing_comma = false
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
force_single_line = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
